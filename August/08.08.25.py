# Библиотека для работы с регулярными выражениями
import re

text1 = 'Мама мыла раму'
pattern1 = 'Мама'
# match() - проверяет, встречается ли шаблон в начале текста.
# Возвращает match-объект.
res1 = re.match(pattern1, text1)

res1_2 = res1.group() # выводит содержимое найденной подстроки
res1_3 = res1.span() # выводит индексы найденной подстроки
res1_4 = res1.start() # выводит индекс начала найденной подстроки
res1_5 = res1.end() # выводит индекс конца найденной подстроки

text2 = 'Мама мыла раму. Мама мыла машину'
pattern2 = 'мыла'
# search() - находит первое слева выхождение паттерна в строку.
# Возвращает match-объект.
res2 = re.search(pattern2, text2)

text3 = 'BABABABABABABABA'
pattern3 = 'BAB'
# finditer() - ищет все непересекающиеся совпадения в строке.
# Возвращает итератор, содержащий match-объекты каждого совпадения.
res3 = re.finditer(pattern3, text3)
res3 = [match for match in res3] # извлечение всех match-объектов в список

text4 = 'ABABABABABABA'
pattern4 = 'ABA'
# findall() - ищет все непересекающиеся совпадения в строке.
# Возвращает список строк содержащих найденные совпадения.
res4 = re.findall(pattern4, text4)

text5 = 'user1@gmail.ru user2@gmail.ru user3@gmail.com'
pattern5 = r'\.ru'
# sub() - позволяет осуществлять замену подстроки,
# соответствующую заданному шаблону в тексте.
res5 = re.sub(pattern5, '.com', text5, count=1)

# Метасимволы.
# . - любой символ;
# \d - любая цифра;
# \D - любая НЕ цифра;
# \s - любой пробельный символ;
# \S - любой НЕ пробельный символ;
# \w - любая цифра, буква или _;
# \b - граница слова;
# \B - НЕ граница слова.

# Шаблоны с диапазонами.
# [0-5] - любая цифра от 0 до 5 включительно;
# [a-z] - любая латинская буква в нижнем регистре;
# [A-Z] - любая латинская буква в верхнем регистре;
# [а-яёА-ЯЁ] - любая кириллическая буква;
# ^ - исключает указанные символы;
# [^a-z] - любые символы, кроме маленьких латинских.

# Квантификаторы.
# {m,n} - от m до n повторений предыдущего символа включительно
# + | {1,} - символ должен встречаться хотя бы 1 раз
# * | {0,} - символ встречается любое кол-во раз, в том числе 0 раз
# ? | {0,1} - символ встречается 0 или 1 раз

# Жадные / ленивые квантификаторы.
# Квантификаторы всегда ЖАДНЫЕ, то есть стараются взять максимальное кол-во символов.
# Чтобы сделать квантификатор ЛЕНИВЫМ, ставим после него ?
text6 = 'кт коот кооот коооот кит киит кииит киииит'
pattern6 = r'к(+7905)*т'
print(re.findall(pattern6, text6))

